/*
 * Copyright 2018 Florent Biville (@fbiville)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fs_test

import (
	"fmt"
	. "github.com/fbiville/headache/fs"
	"github.com/fbiville/headache/fs_mocks"
	"github.com/fbiville/headache/vcs_mocks"
	"github.com/golang/mock/gomock"
	. "github.com/onsi/gomega"
	"os"
	"testing"
	"time"
)

func TestLastExecutionRevisionWithPriorTrackingFile(t *testing.T) {
	I := NewGomegaWithT(t)
	controller := gomock.NewController(t)
	defer controller.Finish()
	vcs := new(vcs_mocks.Vcs)
	defer vcs.AssertExpectations(t)
	fileReader := new(fs_mocks.FileReader)
	defer fileReader.AssertExpectations(t)
	fileWriter := new(fs_mocks.FileWriter)
	defer fileWriter.AssertExpectations(t)
	givenTrackerFileAtRevision(vcs, fileReader, fileWriter, "0xdeadbeef")
	tracker := ExecutionVcsTracker{
		Versioning: vcs,
		FileSystem: FileSystem{FileReader: fileReader, FileWriter: fileWriter},
		Clock:      &FixedClock{},
	}

	revision, err := tracker.GetLastExecutionRevision()

	I.Expect(err).To(BeNil())
	I.Expect(revision).To(Equal("0xdeadbeef"))
}

func TestLastExecutionRevisionWithoutTrackingFile(t *testing.T) {
	I := NewGomegaWithT(t)
	controller := gomock.NewController(t)
	defer controller.Finish()
	vcs := new(vcs_mocks.Vcs)
	defer vcs.AssertExpectations(t)
	fileReader := new(fs_mocks.FileReader)
	defer fileReader.AssertExpectations(t)
	fileWriter := new(fs_mocks.FileWriter)
	defer fileWriter.AssertExpectations(t)
	givenNoTrackerFile(vcs, fileReader, fileWriter)
	tracker := ExecutionVcsTracker{
		Versioning: vcs,
		FileSystem: FileSystem{FileReader: fileReader, FileWriter: fileWriter},
		Clock:      &FixedClock{},
	}

	revision, err := tracker.GetLastExecutionRevision()
	I.Expect(err).To(BeNil())
	I.Expect(revision).To(Equal(""))
}

func TestLastExecutionPropagatesVersioningRootError(t *testing.T) {
	I := NewGomegaWithT(t)
	controller := gomock.NewController(t)
	defer controller.Finish()
	vcs := new(vcs_mocks.Vcs)
	defer vcs.AssertExpectations(t)
	fileReader := new(fs_mocks.FileReader)
	defer fileReader.AssertExpectations(t)

	rootError := fmt.Errorf("root error")
	vcs.On("Root").Return("", rootError)
	tracker := ExecutionVcsTracker{
		Versioning: vcs,
		FileSystem: FileSystem{FileReader: fileReader},
		Clock:      &FixedClock{},
	}

	_, err := tracker.GetLastExecutionRevision()

	I.Expect(err).To(Equal(rootError))
}

func TestLastExecutionPropagatesFileSystemStatError(t *testing.T) {
	I := NewGomegaWithT(t)
	controller := gomock.NewController(t)
	defer controller.Finish()
	vcs := new(vcs_mocks.Vcs)
	defer vcs.AssertExpectations(t)
	fileReader := new(fs_mocks.FileReader)
	defer fileReader.AssertExpectations(t)

	fileInfoError := fmt.Errorf("fileinfo error")
	vcs.On("Root").Return("fake-root", nil)
	fileReader.On("Stat", "fake-root/.headache-run").Return(nil, fileInfoError)
	tracker := ExecutionVcsTracker{
		Versioning: vcs,
		FileSystem: FileSystem{FileReader: fileReader},
		Clock:      &FixedClock{},
	}

	_, err := tracker.GetLastExecutionRevision()

	I.Expect(err).To(Equal(fileInfoError))
}

func TestLastExecutionPropagatesFileSystemWriteError(t *testing.T) {
	I := NewGomegaWithT(t)
	controller := gomock.NewController(t)
	defer controller.Finish()
	vcs := new(vcs_mocks.Vcs)
	defer vcs.AssertExpectations(t)
	fileReader := new(fs_mocks.FileReader)
	defer fileReader.AssertExpectations(t)
	fileWriter := new(fs_mocks.FileWriter)
	defer fileWriter.AssertExpectations(t)

	fileWriteError := fmt.Errorf("oopsie writie")
	vcs.On("Root").Return("fake-root", nil)
	fileReader.On("Stat", "fake-root/.headache-run").Return(nil, os.ErrNotExist)
	fileWriter.On("Write", "fake-root/.headache-run", "# Generated by headache | 42 -- commit me!", os.FileMode(0640)).Return(fileWriteError)
	tracker := ExecutionVcsTracker{
		Versioning: vcs,
		FileSystem: FileSystem{FileReader: fileReader, FileWriter: fileWriter},
		Clock:      &FixedClock{},
	}

	_, err := tracker.GetLastExecutionRevision()

	I.Expect(err).To(Equal(fileWriteError))
}

func TestLastExecutionPropagatesFileSystemTouchError(t *testing.T) {
	I := NewGomegaWithT(t)
	controller := gomock.NewController(t)
	defer controller.Finish()
	vcs := new(vcs_mocks.Vcs)
	defer vcs.AssertExpectations(t)
	fileReader := new(fs_mocks.FileReader)
	defer fileReader.AssertExpectations(t)
	fileWriter := new(fs_mocks.FileWriter)
	defer fileWriter.AssertExpectations(t)

	writeError := fmt.Errorf("write error")
	vcs.On("Root").Return("fake-root", nil)
	fileReader.On("Stat", "fake-root/.headache-run").Return(&FakeFileInfo{FileMode: 0777}, nil)
	fileWriter.On("Write", "fake-root/.headache-run", "# Generated by headache | 42 -- commit me!", os.FileMode(0640)).Return(writeError)
	tracker := ExecutionVcsTracker{
		Versioning: vcs,
		FileSystem: FileSystem{FileReader: fileReader, FileWriter: fileWriter},
		Clock:      &FixedClock{},
	}

	_, err := tracker.GetLastExecutionRevision()

	I.Expect(err).To(Equal(writeError))
}

func TestLastExecutionPropagatesVersioningLastRevisionError(t *testing.T) {
	I := NewGomegaWithT(t)
	controller := gomock.NewController(t)
	defer controller.Finish()
	vcs := new(vcs_mocks.Vcs)
	defer vcs.AssertExpectations(t)
	fileReader := new(fs_mocks.FileReader)
	defer fileReader.AssertExpectations(t)
	fileWriter := new(fs_mocks.FileWriter)
	defer fileWriter.AssertExpectations(t)

	latestRevisionError := fmt.Errorf("latest revision error")
	vcs.On("Root").Return("fake-root", nil)
	fileReader.On("Stat", "fake-root/.headache-run").Return(&FakeFileInfo{FileMode: 0777}, nil)
	fileWriter.On("Write", "fake-root/.headache-run", "# Generated by headache | 42 -- commit me!", os.FileMode(0640)).Return(nil)
	vcs.On("LatestRevision", "fake-root/.headache-run").Return("", latestRevisionError)
	tracker := ExecutionVcsTracker{
		Versioning: vcs,
		FileSystem: FileSystem{FileReader: fileReader, FileWriter: fileWriter},
		Clock:      &FixedClock{},
	}

	_, err := tracker.GetLastExecutionRevision()

	I.Expect(err).To(Equal(latestRevisionError))
}

func TestReadLinesWithoutTrackerFileRevision(t *testing.T) {
	I := NewGomegaWithT(t)
	controller := gomock.NewController(t)
	defer controller.Finish()
	vcs := new(vcs_mocks.Vcs)
	defer vcs.AssertExpectations(t)
	fileReader := new(fs_mocks.FileReader)
	defer fileReader.AssertExpectations(t)
	fileWriter := new(fs_mocks.FileWriter)
	defer fileWriter.AssertExpectations(t)
	givenNoTrackerFile(vcs, fileReader, fileWriter)
	headerFile := "some-header"
	fileReader.On("Read", headerFile).
		Return([]byte("some very important notice\nthat noone will actually read #sadpanda"), nil)
	tracker := ExecutionVcsTracker{
		Versioning: vcs,
		FileSystem: FileSystem{FileReader: fileReader, FileWriter: fileWriter},
		Clock:      &FixedClock{},
	}

	contents, err := tracker.ReadLinesAtLastExecutionRevision(headerFile)

	I.Expect(err).To(BeNil())
	I.Expect(contents.PreviousLines).To(Equal(contents.CurrentLines))
	I.Expect(contents.CurrentLines).To(Equal([]string{
		"some very important notice",
		"that noone will actually read #sadpanda",
	}))
}

func TestReadLinesWithTrackerFileRevision(t *testing.T) {
	I := NewGomegaWithT(t)
	controller := gomock.NewController(t)
	defer controller.Finish()
	vcs := new(vcs_mocks.Vcs)
	defer vcs.AssertExpectations(t)
	fileReader := new(fs_mocks.FileReader)
	defer fileReader.AssertExpectations(t)
	fileWriter := new(fs_mocks.FileWriter)
	defer fileWriter.AssertExpectations(t)
	revision := "0xcafebabe"
	givenTrackerFileAtRevision(vcs, fileReader, fileWriter, revision)
	headerFile := "some-header"
	vcs.On("ShowContentAtRevision", headerFile, revision).
		Return("a somewhat important notice\nI hope will actually read it #foreveroptimism", nil)
	fileReader.On("Read", headerFile).
		Return([]byte("some very important notice\nthat noone will actually read #sadpanda"), nil)
	tracker := ExecutionVcsTracker{
		Versioning: vcs,
		FileSystem: FileSystem{FileReader: fileReader, FileWriter: fileWriter},
		Clock:      &FixedClock{},
	}

	contents, err := tracker.ReadLinesAtLastExecutionRevision(headerFile)

	I.Expect(err).To(BeNil())
	I.Expect(contents.PreviousLines).To(Equal([]string{
		"a somewhat important notice",
		"I hope will actually read it #foreveroptimism",
	}))
	I.Expect(contents.CurrentLines).To(Equal([]string{
		"some very important notice",
		"that noone will actually read #sadpanda",
	}))
}

func TestReadLinesPropagatesReadError(t *testing.T) {
	I := NewGomegaWithT(t)
	controller := gomock.NewController(t)
	defer controller.Finish()
	vcs := new(vcs_mocks.Vcs)
	defer vcs.AssertExpectations(t)
	fileReader := new(fs_mocks.FileReader)
	defer fileReader.AssertExpectations(t)
	fileWriter := new(fs_mocks.FileWriter)
	defer fileWriter.AssertExpectations(t)
	headerFile := "some-header"
	readError := fmt.Errorf("read error")
	fileReader.On("Read", headerFile).Return(nil, readError)
	tracker := ExecutionVcsTracker{
		Versioning: vcs,
		FileSystem: FileSystem{FileReader: fileReader, FileWriter: fileWriter},
		Clock:      &FixedClock{},
	}

	_, err := tracker.ReadLinesAtLastExecutionRevision(headerFile)

	I.Expect(err).To(Equal(readError))
}

func TestReadLinesPropagatesVersioningReadErrorWithTrackerFileRevision(t *testing.T) {
	I := NewGomegaWithT(t)
	controller := gomock.NewController(t)
	defer controller.Finish()
	vcs := new(vcs_mocks.Vcs)
	defer vcs.AssertExpectations(t)
	fileReader := new(fs_mocks.FileReader)
	defer fileReader.AssertExpectations(t)
	fileWriter := new(fs_mocks.FileWriter)
	defer fileWriter.AssertExpectations(t)
	revision := "0xcafebabe"
	givenTrackerFileAtRevision(vcs, fileReader, fileWriter, revision)
	headerFile := "some-header"
	fileReader.On("Read", headerFile).
		Return([]byte("some very important notice\nthat noone will actually read #sadpanda"), nil)
	versioningError := fmt.Errorf("versioning error")
	vcs.On("ShowContentAtRevision", headerFile, revision).Return("", versioningError)
	tracker := ExecutionVcsTracker{
		Versioning: vcs,
		FileSystem: FileSystem{FileReader: fileReader, FileWriter: fileWriter},
		Clock:      &FixedClock{},
	}

	_, err := tracker.ReadLinesAtLastExecutionRevision(headerFile)

	I.Expect(err).To(Equal(versioningError))
}

func TestReadLinesPropagatesTrackerFileRevisionError(t *testing.T) {
	I := NewGomegaWithT(t)
	controller := gomock.NewController(t)
	defer controller.Finish()
	vcs := new(vcs_mocks.Vcs)
	defer vcs.AssertExpectations(t)
	fileReader := new(fs_mocks.FileReader)
	defer fileReader.AssertExpectations(t)
	fileWriter := new(fs_mocks.FileWriter)
	defer fileWriter.AssertExpectations(t)
	headerFile := "some-header"
	fileReader.On("Read", headerFile).
		Return([]byte("some very important notice\nthat noone will actually read #sadpanda"), nil)
	vcsRootError := fmt.Errorf("root error")
	vcs.On("Root").Return("", vcsRootError)
	tracker := ExecutionVcsTracker{
		Versioning: vcs,
		FileSystem: FileSystem{FileReader: fileReader, FileWriter: fileWriter},
		Clock:      &FixedClock{},
	}

	_, err := tracker.ReadLinesAtLastExecutionRevision(headerFile)

	I.Expect(err).To(Equal(vcsRootError))
}

func givenTrackerFileAtRevision(vcs *vcs_mocks.Vcs, fileReader *fs_mocks.FileReader, fileWriter *fs_mocks.FileWriter, revision string) {
	vcs.On("Root").Return("fake-root", nil)
	fileReader.On("Stat", "fake-root/.headache-run").Return(&FakeFileInfo{FileMode: 0777}, nil)
	fileWriter.On("Write", "fake-root/.headache-run", "# Generated by headache | 42 -- commit me!", os.FileMode(0640)).Return(nil)
	vcs.On("LatestRevision", "fake-root/.headache-run").Return(revision, nil)
}

func givenNoTrackerFile(vcs *vcs_mocks.Vcs, fileReader *fs_mocks.FileReader, fileWriter *fs_mocks.FileWriter) {
	vcs.On("Root").Return("fake-root", nil)
	fileReader.On("Stat", "fake-root/.headache-run").Return(nil, os.ErrNotExist)
	fileWriter.On("Write", "fake-root/.headache-run", "# Generated by headache | 42 -- commit me!", os.FileMode(0640)).Return(nil)
	vcs.On("LatestRevision", "fake-root/.headache-run").Return("", nil)
}

type FixedClock struct{}

func (*FixedClock) Now() time.Time {
	return time.Unix(42, 42)
}
